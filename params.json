{
  "name": "Service-my-wallet-v3",
  "tagline": "Blockchain Wallet API V2",
  "body": "\r\n# Blockchain Кошелек API-интерфейс V2 Программным с Blockchain.info бумажнике. ## * Содержание [Начало работы] (# получение стартером) * [Обновление] (# модернизация) * [Документация по API] (# апи-документация) * [RPC API] (# RPC) * [Установка] (# установка) * [Устранение неполадок] (# устранение неисправностей) * [использование] (# использование) * [разработка] (# разработка) * [развертывание] (# развертывание) ## Начало работы чтобы использовать этот API, вам нужно будет запустить небольшую местную службу , нести ответственность за управление вашей Blockchain.info бумажник. Ваше приложение взаимодействует с этой службой локально с помощью вызовов HTTP API. Для начала необходимо выполнить следующие шаги: 1. Выполните [Инструкция по установке] (# установки) 2. Запустите Сервер: `$ blockchain Старт Кошелек-служба --port 3000` 3. Справочная информация В [документации] (# Апи-документация) и начать взаимодействие с бумажником программным способом! Обратите внимание, что `blockchain-кошелек предназначен` для запуска Обслуживания на ТОЙ локально же машине, как приложение и, следовательно, будет принимать соединения только от` localhost`. Если вы измените эту услугу, чтобы принять внешние соединения, не забудьте добавить соответствующие правила брандмауэра для предотвращения несанкционированного использования. Код API необходим для создания бумажника и более высоких пределов запроса. Для основного использования, не требуется никакого кода API. Запрос КОДА API [здесь] (https://blockchain.info/api/api_create_code). ## Обновление Если у вас уже есть приложение, которое использует [Бумажник API Blockchain.info товара] (https://blockchain.info/api/blockchain_wallet_api), вам нужно будет выполнить действия, описанные в разделе Начало работы выше, а затем, в вашем код приложения, заменить вызовы на `blockchain.info/merchant~~pobj / ...` `с локальный: <порт> / торговец / ...`. ## Документация по API Посмотрите [оригинальную документацию] (https://blockchain.info/api/blockchain_wallet_api). Все конечные точки, присутствующие в документации по API выше поддерживаются в Blockchain Бумажник API V2. Различия между двумя являются: «Объединить адреса\" конечная точка была опущена Все конечные точки можно назвать с `GET` или` Post`, и могут быть доступны только с` localhost` ### Создание нового Blockchain бумажника конечной точки:. `/ API / v2 / create` Параметры запроса: * `password` - главный кошелек пароль (обязательно) *` api_code` - blockchain.info бумажник апи код (обязательно) * `priv` - секретный ключ для импорта в бумажнике как первый адрес (по желанию ) * `label` - ярлык, по ЧТОБЫ дать первому адресу, генерируемой в кошельке (по желанию) *` email` - электронная почта для связи с вновь созданным кошельке (по желанию) Пример ответа: `` `{JSON\" справ \": \"05f290be-DBEF-4636-a809-868893c51711\", \"адрес\": \"13R9dBgKwBP29JKo11zhfi74YuBsMxJ4qY\", \"ярлык\": \"Главный адрес\"} `` `### Make конечных точек оплаты:` / торговец /: справ / payment` Параметры запроса : * `в` - Bitcoin адрес для отправки (обязательно) *` amount` - в ** суммы Satoshi ** для отправки (обязательно) * `password` - главный кошелек пароль (обязательно) *` second_password` - второй бумажник пароль ( требуется, только если второй пароль включен) * `api_code` - blockchain.info бумажника код апи (опционально) *` от` - Bitcoin адрес или индекс счета для отправки из (по желанию) * `fee` - указание плата за сделку ** в Satoshi ** (по желанию, в противном случае плата вычисляется) Образец ответ: `` `{JSON\" до \": [\" 1A8JiWcwvpY7tAopUkSnGuEYHmzGYfZPiq \"],\" от \": [\" 17p49XUC2fw4Fn53WjZqYAm4APKqhNPEkY \"],\" суммы \": [200000], \"плата\": 1000, \"TXID\": \"f322d01ad784e5deeb25464a5781c3b20971c1863679ca506e702e3e33c18e9c\", \"Успех\":} `истинный` `### Нескольким конечной точки:` / продавец /: / sendmany` GUID Параметры запроса: * `recipients` - а * URI кодированный * [объект JSON] (http://json.org/example.html), с Bitcoin адреса в качестве ключей и ** ** Satoshi суммы в качестве значений (обязательно, смотри пример ниже) * `password` - главный кошелек пароль (обязательно) * `second_password` - второй бумажник пароль (требуется, только если второй пароль включен) *` api_code` - blockchain.info бумажник кодекса API (опционально) * `от` - Bitcoin адрес или индекс учетной записи для отправки сообщений с (по желанию) * `fee` - указание плата за сделку ** в Satoshi ** (не обязательно, в противном случае плата вычисляется) URI Кодирование объекта JSON в JavaScript:` `` Js VAR MyObject = {Адрес1: 10000, address2: 50000}; вар myJSONString = JSON.stringify (MyObject); // `EncodeURIComponent` глобальная функция вар myURIEncodedJSONString = encodeURIComponent (myJSONString); // `MyURIEncodedJSONString` Использовать как` recipients` параметра` `` Образец Ответ: `` `{JSON\" к \": [\" 1A8JiWcwvpY7tAopUkSnGuEYHmzGYfZPiq \",\" 18fyqiZzndTxdVo7g9ouRogB4uFj86JJiy \"],\" от \": [\" 17p49XUC2fw4Fn53WjZqYAm4APKqhNPEkY \"],\" количество \": [16 000, 5400030], \"плата\": 2000, \"TXID\": \"f322d01ad784e5deeb25464a5781c3b20971c1863679ca506e702e3e33c18e9c\", \"Успех\":} `истинный` `### Fetch Кошельке конечных точек:` / торговец /: справ / balance` Параметры запроса: * `password` - главный кошелек пароль (обязательно) *` api_code` - blockchain.info бумажник апи кода (обязательно) Образец ответ: `` `{JSON\" баланс \": 10000}` `` ### Список адресов конечных точек: ` / торговец /: справ / list` Параметры запроса: * `password` - главный кошелек пароль (обязательно) *` api_code` - blockchain.info бумажника апи кода (опция) Образец ответ: `` `{\" JSON адреса \": [{ \"баланс\": 79434360, \"адрес\": \"1A8JiWcwvpY7tAopUkSnGuEYHmzGYfZPiq\", \"ярлык\": \"Мой кошелек\", \"total_received\": 453300048335}, { \"баланс\": 0, \"адрес\": \"17p49XUC2fw4Fn53WjZqYAm4APKqhNPEkY\", \"total_received\": 0 }]} `` `### Fetch Адрес бАЛАНС ТОЧКИ: конечной` / торговец /: справ / address_balance` Параметры запроса: * `address` -, адрес: Чтобы принести бАЛАНС (оБЯЗАТЕЛЬНО) *` password` - главный кошелек пароль (обязательно ) * `api_code` - blockchain.info бумажника апи кода (опция) Примечание: в отличие от размещенного API, не существует вариант с` confirmations` параметра для указания минимальных подтверждений. Пример Ответ: `` `{JSON\" баланс \": 129043,\" адрес \":\" 19r7jAbPDtfTKQ9VJpvDzFFxCjUJFKesVZ \",\" total_received \": 53645423}` `` ### Генерирование адрес конечной точки: `/ Торговец /: справ / new_address` Параметры запроса : * `password` - главный кошелек пароль (обязательно) *` label` - ярлык, чтобы дать адрес (по желанию) * `api_code` - blockchain.info бумажника апи кода (опция) Образец ответ:` `` {JSON \"адрес \":\" 18fyqiZzndTxdVo7g9ouRogB4uFj86JJiy \",\" ярлык \":\" Мой новый адрес \"}` `` ### Архив адрес конечной точки: `/ торговец /: справ / archive_address` Параметры запроса: *` address` - адрес в архив (обязательно) * `password` - главный кошелек пароль (обязательно) *` api_code` - blockchain.info бумажника апи кода (опция) Образец ответ: `` `{JSON\" в архив \":\" 18fyqiZzndTxdVo7g9ouRogB4uFj86JJiy \"}` `` ### разархивировать Адрес конечной точки: `/ торговец /: Guid / unarchive_address` Параметры запроса: *` address` - адрес разархивировать (обязательно) * `password` - главный кошелек пароль (обязательно) *` api_code` - blockchain.info бумажника апи кода (опция) образец ответ: `` `{JSON\" активный \":\" 18fyqiZzndTxdVo7g9ouRogB4uFj86JJiy \"}` `` ### Включение HD Функциональность конечной точки: `/ торговец /: Guid / enableHD` Параметры запроса: *` password` - главный кошелек пароль (обязательно ) * `` api_code - blockchain.info бумажник API-код (по желанию) Это позволит обновить бумажник на HD (Иерархическая Детерминированная) кошелек, что позволяет использование учетных записей. См [BIP32] (https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) для получения дополнительной информации о HD кошельков и счетов. ### HD Список Активный Учетные записи конечной точки: `/ торговый /: Guid / accounts` Параметры запроса: *` password` - главный кошелек пароль (обязательно) * `api_code` - blockchain.info бумажник апи код (по желанию) # ## HD xPubs Список конечных точек: `/ / купец: Guid / счета / xpubs` Параметры запроса: *` password` - главный кошелек пароль (обязательно) * `api_code` - blockchain.info бумажник апи код (по желанию) ## # Создать новый аккаунт HD Конечная точка: `/ торговец /: Guid / счета / create` Параметры запроса: *` label` - метка для назначения вновь созданной учетной записи (опционально) * `password` - главный кошелек пароля (обязательно) *` api_code` - blockchain. Информация о бумажник апи код (по желанию) ### Single HD Получить конечной точки аккаунта: `/ торговец /: Guid / счета /: xpub_or_index` Параметры запроса: *` password` - главный кошелек пароль (обязательно) * `api_code` - blockchain.info бумажник апи код (по желанию) ### HD Получить учетную запись Получение адреса конечной точки: `/ торговец /: Guid / счета /: xpub_or_index / receiveAddress` Параметры запроса: *` password` - главный кошелек пароль (обязательно) * `api_code` - blockchain .info бумажника апи кода (опция) ### HD Проверка счета текущих операций конечной точки:` / торгового /: Guid / счета /: xpub_or_index / balance` Параметры запроса: * `password` - главный кошелек пароль ( обязательно) * `api_code` - blockchain.info код бумажника апи (опция) ### Архив HD учетной записи конечной точки:` / торговец /: Guid / счета /: xpub_or_index / archive` Параметры запроса: * `password` - главный кошелек пароль (обязательно) * `api_code` - blockchain.info код бумажника апи (по желанию) ### Разархивировать HD Счет конечных точек:` / торговец /: Guid / счета /: xpub_or_index / unarchive` Параметры запроса: * `password` - главный кошелек пароль (обязательно) * `api_code` - blockchain.info код бумажника апи (необязательно) ## RPC Bitcoind RPC API совместимый. Полная документация доступна [здесь] (https://blockchain.info/api/json_rpc_api). Запуск сервера RPC: `` `$ blockchain-кошелек запуска службы RPC [опции]` `` Просмотреть дополнительные опции и инструкции по использованию в соответствии с [] (# использования). Отличия от сервера API: * Опция `-rpcssl` не поддерживается * Метод` listsinceblock` не поддерживается * Парам` minConfimations` не поддерживается для методов` listreceivedbyaccount` и `listreceivedbyaddress` * Парам` minimumConfirmations` не поддерживается для метода` getbalance` * Парам `confirmations` не поддерживается для метода` listaccounts` * Реакции, представляющие операции имеют различный формат ## Установка [` nodejs`] (https://nodejs.org) и [ `npm`] (HTTPS: / /npmjs.com) необходимо установить и использовать этот сервис API. При установке: `` `$ ш НПМ установить -g blockchain кошелек-сервис`` `Для лучшей стабильности и производительности, убедитесь, что вы всегда используете самую последнюю версию. Чтобы проверить свою версию: `` `$ blockchain ш-кошелек -V` служба` `Чтобы обновить до последней версии:` `` $ ш обновления НПМ -g blockchain кошелек-сервис` `` Требуется: * узел> = 0.12.0 * НПМ> = 2.12.0, <3.0.0 Если у вас есть вопросы, связанные с процессом установки, смотрите раздел по устранению неполадок. ## Устранение ошибок при установке: * Если вы получаете `EACCESS` или ошибок связанных с правами, может быть необходимо запустить установку как корень, используя` sudo` команду. Запуск ошибки: * Если запуск терпит неудачу с `/ USR / BIN / ENV: узел: Нет такого файла или directory`, возможно узел не установлен или был установлен с другим именем (Ubuntu, например, устанавливает узел в качестве nodejs), Если узел был установлен с другим именем, создать символическую ссылку на ваш узел двоичного файла: `Sudo LN -s / USR / бен / nodejs / USR / бен / node`, или установить узел через [Node Version Manager] (https: // GitHub. ком / creationix / NVM). Ошибки времени выполнения: * Если вы видите на `TypeError` утверждая, что объект` не имеет метод 'compare'`, это происходит потому, что вы находитесь на версии узла старше 0,12, до того, как` compare` метод был добавлен в буфер. Попробуйте обновить по крайней мере Node версии 0.12. * Если вы получаете ошибки бумажника дешифровки, несмотря на правильные учетные данные, то вполне возможно, что у вас не установлена ​​Java, которая необходима зависимость модуля мой кошелек-v3. : Не имея Java установлен во время `install` процесс НПМ может привести к невозможности расшифровать бумажники. Загрузите JDK из [здесь Mac] (https://support.apple.com/kb/DL1572) или выполнив команду `APT-получить установку по умолчанию-jdk` на Debian-систем На базе Linux. Тайм-аут ошибки: * Если вы получаете ответ тайм-аут, дополнительное разрешение от вашего кошелька blockchain может потребоваться. Это может произойти при использовании непризнанный браузер или IP-адрес. Адрес электронной авторизации попытки доступа API будут посланы к зарегистрированному пользователю, что потребует принятия мер для того, чтобы разрешить будущие запросы. Если этот раздел не помогло, пожалуйста, открыть вопрос GitHub или посетить наш центр поддержки [] (https://blockchain.zendesk.com). ## Использование После установки службы, команда `blockchain-кошелек будет` обслуживания доступны для использования. ### * `Опции -h, --help` - информация об использовании вывода *` -V, --version` - вывод номер версии * `-c, --cwd` - использовать текущий каталог в качестве модуля бумажника службы ( разработка только) ### #### команды запуска Использование: `blockchain-старт-кошелек сервис [опции]` Эта команда будет запущена служба, что делает blockchain API V2 бумажник доступны на указанный порт. Опции команды: * `-h, --help` - информация об использовании вывода *` -p, --port` - номер порта для запуска сервера на (по умолчанию `3000`) *` -b, --bind` - привязать к определенному IP (по умолчанию `127.0.0.1`, обратите внимание, что привязка к IP-другому, чем это может привести к уязвимости в системе безопасности) *` --ssl-key` - путь к вашему ключу SSL (опционально) * `- -ssl-cert` - путь к вашему сертификату SSL (по желанию) чтобы открыть сервис для всех входящих соединений, связываются с` 0.0.0.0`. #### Запуск Rpc Использование: `blockchain-кошелек запуска службы RPC [опции]` Эта команда запустит сервер JSON-RPC. Опции: * `-k, --key` - апи код использовать для запросов к серверу (требуется опция) *` -p, --rpcport` - порт сервера RPC (по умолчанию: 8000) * `-b, --bind `- привязку к конкретному IP (по умолчанию` 127.0.0.1`, обратите внимание, что привязка к IP-другому, чем это может привести к уязвимости в системе безопасности) Получить код API [здесь] (https://blockchain.info/ апи / api_create_code), ### Примеры Чтобы запустить службу бумажника API на порту 3000: `` `ш старт $ blockchain кошелек-сервис --port 3000`` `## 1. Развитие Клон Этот Репозиторий 2. Запустите` НПМ install` 3. Запустите `НПМ start` 4. Dev сервер теперь работает на порту 3000 Если вы разрабатываете` blockchain-кошелек наряду с этим под клиента модуля, полезно создать символическую ссылку на` мой кошелек-v3`: `` `$ ш пер -s ../path/to/my-wallet-v3 node_modules / blockchain кошелек-клиент `` `###` `Тестирование` ш тест $ НПМ` `` ### Дополнительные параметры конфигурации могут быть сконфигурированы в `.env` файл : * `PORT` - номер порта для запуска сервера DEV (по умолчанию:` 3000`) * `BIND` - IP-Адрес, чтобы связать услугу (по умолчанию:` 127.0.0.1`) ## Развертывание Если вы хотите использовать blockchain кошелек-сервис в вашем сервере UNIX, вы просто должны работать: `` `$ ш поЬир старт blockchain-кошелек-сервис --port 3000 &` ``\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}